/**
 * generated by Xtext 2.12.0
 */
package org.tetrabox.miniJava.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.tetrabox.miniJava.ArgumentList;
import org.tetrabox.miniJava.BlockStatement;
import org.tetrabox.miniJava.Expression;
import org.tetrabox.miniJava.IfThenElseStatement;
import org.tetrabox.miniJava.IfThenStatement;
import org.tetrabox.miniJava.MiniJavaPackage;
import org.tetrabox.miniJava.PostfixExpression;
import org.tetrabox.miniJava.PrefixExpression;
import org.tetrabox.miniJava.Primary;
import org.tetrabox.miniJava.ReturnStatement;
import org.tetrabox.miniJava.Statement;
import org.tetrabox.miniJava.StatementExpression;
import org.tetrabox.miniJava.Suffix;
import org.tetrabox.miniJava.WhileStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tetrabox.miniJava.impl.ExpressionImpl#getSuffixes <em>Suffixes</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.ExpressionImpl#getStatement <em>Statement</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.ExpressionImpl#getStatementIf <em>Statement If</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.ExpressionImpl#getStatementElse <em>Statement Else</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.ExpressionImpl#getExpressions <em>Expressions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends VariableDeclaratorImpl implements Expression
{
  /**
   * The cached value of the '{@link #getSuffixes() <em>Suffixes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuffixes()
   * @generated
   * @ordered
   */
  protected EList<Suffix> suffixes;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected Statement statement;

  /**
   * The cached value of the '{@link #getStatementIf() <em>Statement If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementIf()
   * @generated
   * @ordered
   */
  protected Statement statementIf;

  /**
   * The cached value of the '{@link #getStatementElse() <em>Statement Else</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementElse()
   * @generated
   * @ordered
   */
  protected Statement statementElse;

  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<PrefixExpression> expressions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Suffix> getSuffixes()
  {
    if (suffixes == null)
    {
      suffixes = new EObjectContainmentEList<Suffix>(Suffix.class, this, MiniJavaPackage.EXPRESSION__SUFFIXES);
    }
    return suffixes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(Statement newStatement, NotificationChain msgs)
  {
    Statement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement(Statement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement getStatementIf()
  {
    return statementIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatementIf(Statement newStatementIf, NotificationChain msgs)
  {
    Statement oldStatementIf = statementIf;
    statementIf = newStatementIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__STATEMENT_IF, oldStatementIf, newStatementIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatementIf(Statement newStatementIf)
  {
    if (newStatementIf != statementIf)
    {
      NotificationChain msgs = null;
      if (statementIf != null)
        msgs = ((InternalEObject)statementIf).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__STATEMENT_IF, null, msgs);
      if (newStatementIf != null)
        msgs = ((InternalEObject)newStatementIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__STATEMENT_IF, null, msgs);
      msgs = basicSetStatementIf(newStatementIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__STATEMENT_IF, newStatementIf, newStatementIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement getStatementElse()
  {
    return statementElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatementElse(Statement newStatementElse, NotificationChain msgs)
  {
    Statement oldStatementElse = statementElse;
    statementElse = newStatementElse;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__STATEMENT_ELSE, oldStatementElse, newStatementElse);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatementElse(Statement newStatementElse)
  {
    if (newStatementElse != statementElse)
    {
      NotificationChain msgs = null;
      if (statementElse != null)
        msgs = ((InternalEObject)statementElse).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__STATEMENT_ELSE, null, msgs);
      if (newStatementElse != null)
        msgs = ((InternalEObject)newStatementElse).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__STATEMENT_ELSE, null, msgs);
      msgs = basicSetStatementElse(newStatementElse, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__STATEMENT_ELSE, newStatementElse, newStatementElse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PrefixExpression> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EObjectContainmentEList<PrefixExpression>(PrefixExpression.class, this, MiniJavaPackage.EXPRESSION__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__SUFFIXES:
        return ((InternalEList<?>)getSuffixes()).basicRemove(otherEnd, msgs);
      case MiniJavaPackage.EXPRESSION__STATEMENT:
        return basicSetStatement(null, msgs);
      case MiniJavaPackage.EXPRESSION__STATEMENT_IF:
        return basicSetStatementIf(null, msgs);
      case MiniJavaPackage.EXPRESSION__STATEMENT_ELSE:
        return basicSetStatementElse(null, msgs);
      case MiniJavaPackage.EXPRESSION__EXPRESSIONS:
        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__SUFFIXES:
        return getSuffixes();
      case MiniJavaPackage.EXPRESSION__STATEMENT:
        return getStatement();
      case MiniJavaPackage.EXPRESSION__STATEMENT_IF:
        return getStatementIf();
      case MiniJavaPackage.EXPRESSION__STATEMENT_ELSE:
        return getStatementElse();
      case MiniJavaPackage.EXPRESSION__EXPRESSIONS:
        return getExpressions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__SUFFIXES:
        getSuffixes().clear();
        getSuffixes().addAll((Collection<? extends Suffix>)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__STATEMENT:
        setStatement((Statement)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__STATEMENT_IF:
        setStatementIf((Statement)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__STATEMENT_ELSE:
        setStatementElse((Statement)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends PrefixExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__SUFFIXES:
        getSuffixes().clear();
        return;
      case MiniJavaPackage.EXPRESSION__STATEMENT:
        setStatement((Statement)null);
        return;
      case MiniJavaPackage.EXPRESSION__STATEMENT_IF:
        setStatementIf((Statement)null);
        return;
      case MiniJavaPackage.EXPRESSION__STATEMENT_ELSE:
        setStatementElse((Statement)null);
        return;
      case MiniJavaPackage.EXPRESSION__EXPRESSIONS:
        getExpressions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__SUFFIXES:
        return suffixes != null && !suffixes.isEmpty();
      case MiniJavaPackage.EXPRESSION__STATEMENT:
        return statement != null;
      case MiniJavaPackage.EXPRESSION__STATEMENT_IF:
        return statementIf != null;
      case MiniJavaPackage.EXPRESSION__STATEMENT_ELSE:
        return statementElse != null;
      case MiniJavaPackage.EXPRESSION__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == StatementExpression.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == BlockStatement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Statement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == IfThenStatement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == IfThenElseStatement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == WhileStatement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ReturnStatement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ArgumentList.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrefixExpression.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostfixExpression.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Primary.class)
    {
      switch (derivedFeatureID)
      {
        case MiniJavaPackage.EXPRESSION__SUFFIXES: return MiniJavaPackage.PRIMARY__SUFFIXES;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == StatementExpression.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == BlockStatement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Statement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == IfThenStatement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == IfThenElseStatement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == WhileStatement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ReturnStatement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ArgumentList.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrefixExpression.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostfixExpression.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Primary.class)
    {
      switch (baseFeatureID)
      {
        case MiniJavaPackage.PRIMARY__SUFFIXES: return MiniJavaPackage.EXPRESSION__SUFFIXES;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //ExpressionImpl
