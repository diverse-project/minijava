/**
 * generated by Xtext 2.12.0
 */
package org.tetrabox.miniJava.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.tetrabox.miniJava.Expression;
import org.tetrabox.miniJava.ForInit;
import org.tetrabox.miniJava.ForStatement;
import org.tetrabox.miniJava.ForUpdate;
import org.tetrabox.miniJava.LocalVariableDeclaration;
import org.tetrabox.miniJava.MiniJavaPackage;
import org.tetrabox.miniJava.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Local Variable Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tetrabox.miniJava.impl.LocalVariableDeclarationImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.LocalVariableDeclarationImpl#getUpdate <em>Update</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.LocalVariableDeclarationImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocalVariableDeclarationImpl extends LocalVariableDeclarationStatementImpl implements LocalVariableDeclaration
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getUpdate() <em>Update</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdate()
   * @generated
   * @ordered
   */
  protected ForUpdate update;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected Statement statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocalVariableDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.LOCAL_VARIABLE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForUpdate getUpdate()
  {
    return update;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpdate(ForUpdate newUpdate, NotificationChain msgs)
  {
    ForUpdate oldUpdate = update;
    update = newUpdate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE, oldUpdate, newUpdate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpdate(ForUpdate newUpdate)
  {
    if (newUpdate != update)
    {
      NotificationChain msgs = null;
      if (update != null)
        msgs = ((InternalEObject)update).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE, null, msgs);
      if (newUpdate != null)
        msgs = ((InternalEObject)newUpdate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE, null, msgs);
      msgs = basicSetUpdate(newUpdate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE, newUpdate, newUpdate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(Statement newStatement, NotificationChain msgs)
  {
    Statement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement(Statement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION:
        return basicSetExpression(null, msgs);
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE:
        return basicSetUpdate(null, msgs);
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION:
        return getExpression();
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE:
        return getUpdate();
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE:
        setUpdate((ForUpdate)newValue);
        return;
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT:
        setStatement((Statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION:
        setExpression((Expression)null);
        return;
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE:
        setUpdate((ForUpdate)null);
        return;
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT:
        setStatement((Statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION:
        return expression != null;
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE:
        return update != null;
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == Statement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ForStatement.class)
    {
      switch (derivedFeatureID)
      {
        case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION: return MiniJavaPackage.FOR_STATEMENT__EXPRESSION;
        case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE: return MiniJavaPackage.FOR_STATEMENT__UPDATE;
        case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT: return MiniJavaPackage.FOR_STATEMENT__STATEMENT;
        default: return -1;
      }
    }
    if (baseClass == ForInit.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == Statement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ForStatement.class)
    {
      switch (baseFeatureID)
      {
        case MiniJavaPackage.FOR_STATEMENT__EXPRESSION: return MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__EXPRESSION;
        case MiniJavaPackage.FOR_STATEMENT__UPDATE: return MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__UPDATE;
        case MiniJavaPackage.FOR_STATEMENT__STATEMENT: return MiniJavaPackage.LOCAL_VARIABLE_DECLARATION__STATEMENT;
        default: return -1;
      }
    }
    if (baseClass == ForInit.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //LocalVariableDeclarationImpl
