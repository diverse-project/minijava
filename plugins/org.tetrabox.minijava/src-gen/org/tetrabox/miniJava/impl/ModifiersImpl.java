/**
 * generated by Xtext 2.12.0
 */
package org.tetrabox.miniJava.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.tetrabox.miniJava.MethodBody;
import org.tetrabox.miniJava.MethodDeclaration;
import org.tetrabox.miniJava.MethodHeader;
import org.tetrabox.miniJava.MiniJavaPackage;
import org.tetrabox.miniJava.Modifiers;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Modifiers</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tetrabox.miniJava.impl.ModifiersImpl#getBody <em>Body</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.ModifiersImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.ModifiersImpl#getDeclarator <em>Declarator</em>}</li>
 *   <li>{@link org.tetrabox.miniJava.impl.ModifiersImpl#getThrows <em>Throws</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModifiersImpl extends FieldDeclarationImpl implements Modifiers
{
  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected MethodBody body;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getDeclarator() <em>Declarator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclarator()
   * @generated
   * @ordered
   */
  protected static final String DECLARATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDeclarator() <em>Declarator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclarator()
   * @generated
   * @ordered
   */
  protected String declarator = DECLARATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getThrows() <em>Throws</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThrows()
   * @generated
   * @ordered
   */
  protected static final String THROWS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getThrows() <em>Throws</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThrows()
   * @generated
   * @ordered
   */
  protected String throws_ = THROWS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModifiersImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.MODIFIERS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodBody getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(MethodBody newBody, NotificationChain msgs)
  {
    MethodBody oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MODIFIERS__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBody(MethodBody newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.MODIFIERS__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.MODIFIERS__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MODIFIERS__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MODIFIERS__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDeclarator()
  {
    return declarator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclarator(String newDeclarator)
  {
    String oldDeclarator = declarator;
    declarator = newDeclarator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MODIFIERS__DECLARATOR, oldDeclarator, declarator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getThrows()
  {
    return throws_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThrows(String newThrows)
  {
    String oldThrows = throws_;
    throws_ = newThrows;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MODIFIERS__THROWS, oldThrows, throws_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MODIFIERS__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MODIFIERS__BODY:
        return getBody();
      case MiniJavaPackage.MODIFIERS__TYPE:
        return getType();
      case MiniJavaPackage.MODIFIERS__DECLARATOR:
        return getDeclarator();
      case MiniJavaPackage.MODIFIERS__THROWS:
        return getThrows();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MODIFIERS__BODY:
        setBody((MethodBody)newValue);
        return;
      case MiniJavaPackage.MODIFIERS__TYPE:
        setType((String)newValue);
        return;
      case MiniJavaPackage.MODIFIERS__DECLARATOR:
        setDeclarator((String)newValue);
        return;
      case MiniJavaPackage.MODIFIERS__THROWS:
        setThrows((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MODIFIERS__BODY:
        setBody((MethodBody)null);
        return;
      case MiniJavaPackage.MODIFIERS__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MiniJavaPackage.MODIFIERS__DECLARATOR:
        setDeclarator(DECLARATOR_EDEFAULT);
        return;
      case MiniJavaPackage.MODIFIERS__THROWS:
        setThrows(THROWS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MODIFIERS__BODY:
        return body != null;
      case MiniJavaPackage.MODIFIERS__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case MiniJavaPackage.MODIFIERS__DECLARATOR:
        return DECLARATOR_EDEFAULT == null ? declarator != null : !DECLARATOR_EDEFAULT.equals(declarator);
      case MiniJavaPackage.MODIFIERS__THROWS:
        return THROWS_EDEFAULT == null ? throws_ != null : !THROWS_EDEFAULT.equals(throws_);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == MethodDeclaration.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == MethodHeader.class)
    {
      switch (derivedFeatureID)
      {
        case MiniJavaPackage.MODIFIERS__BODY: return MiniJavaPackage.METHOD_HEADER__BODY;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == MethodDeclaration.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == MethodHeader.class)
    {
      switch (baseFeatureID)
      {
        case MiniJavaPackage.METHOD_HEADER__BODY: return MiniJavaPackage.MODIFIERS__BODY;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", declarator: ");
    result.append(declarator);
    result.append(", throws: ");
    result.append(throws_);
    result.append(')');
    return result.toString();
  }

} //ModifiersImpl
