/**
 * generated by Xtext 2.12.0
 */
package org.tetrabox.miniJava.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.tetrabox.miniJava.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MiniJavaFactoryImpl extends EFactoryImpl implements MiniJavaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MiniJavaFactory init()
  {
    try
    {
      MiniJavaFactory theMiniJavaFactory = (MiniJavaFactory)EPackage.Registry.INSTANCE.getEFactory(MiniJavaPackage.eNS_URI);
      if (theMiniJavaFactory != null)
      {
        return theMiniJavaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MiniJavaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniJavaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MiniJavaPackage.GOAL: return createGoal();
      case MiniJavaPackage.COMPILATION_UNIT: return createCompilationUnit();
      case MiniJavaPackage.TYPE_DECLARATION: return createTypeDeclaration();
      case MiniJavaPackage.MODIFIERS: return createModifiers();
      case MiniJavaPackage.CLASS_DECLARATION: return createClassDeclaration();
      case MiniJavaPackage.CLASS_BODY: return createClassBody();
      case MiniJavaPackage.CLASS_MEMBER_DECLARATION: return createClassMemberDeclaration();
      case MiniJavaPackage.FIELD_DECLARATION: return createFieldDeclaration();
      case MiniJavaPackage.METHOD_DECLARATION: return createMethodDeclaration();
      case MiniJavaPackage.METHOD_HEADER: return createMethodHeader();
      case MiniJavaPackage.METHOD_BODY: return createMethodBody();
      case MiniJavaPackage.BLOCK: return createBlock();
      case MiniJavaPackage.BLOCK_STATEMENT: return createBlockStatement();
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION_STATEMENT: return createLocalVariableDeclarationStatement();
      case MiniJavaPackage.LOCAL_VARIABLE_DECLARATION: return createLocalVariableDeclaration();
      case MiniJavaPackage.VARIABLE_DECLARATORS: return createVariableDeclarators();
      case MiniJavaPackage.VARIABLE_DECLARATOR: return createVariableDeclarator();
      case MiniJavaPackage.STATEMENT: return createStatement();
      case MiniJavaPackage.EXPRESSION_STATEMENT: return createExpressionStatement();
      case MiniJavaPackage.STATEMENT_EXPRESSION: return createStatementExpression();
      case MiniJavaPackage.IF_THEN_STATEMENT: return createIfThenStatement();
      case MiniJavaPackage.IF_THEN_ELSE_STATEMENT: return createIfThenElseStatement();
      case MiniJavaPackage.WHILE_STATEMENT: return createWhileStatement();
      case MiniJavaPackage.DO_WHILE_STATEMENT: return createDoWhileStatement();
      case MiniJavaPackage.RETURN_STATEMENT: return createReturnStatement();
      case MiniJavaPackage.FOR_STATEMENT: return createForStatement();
      case MiniJavaPackage.FOR_INIT: return createForInit();
      case MiniJavaPackage.FOR_UPDATE: return createForUpdate();
      case MiniJavaPackage.STATEMENT_EXPRESSION_LIST: return createStatementExpressionList();
      case MiniJavaPackage.EXPRESSION: return createExpression();
      case MiniJavaPackage.ASSIGNMENT_EXPRESSION: return createAssignmentExpression();
      case MiniJavaPackage.CONDITIONAL_EXPRESSION: return createConditionalExpression();
      case MiniJavaPackage.INFIX_EXPRESSION: return createInfixExpression();
      case MiniJavaPackage.PREFIX_EXPRESSION: return createPrefixExpression();
      case MiniJavaPackage.POSTFIX_EXPRESSION: return createPostfixExpression();
      case MiniJavaPackage.SUFFIX: return createSuffix();
      case MiniJavaPackage.ARRAY_ACCESS: return createArrayAccess();
      case MiniJavaPackage.METHOD_INVOCATION: return createMethodInvocation();
      case MiniJavaPackage.ARGUMENT_LIST: return createArgumentList();
      case MiniJavaPackage.PRIMARY: return createPrimary();
      case MiniJavaPackage.ARRAY_CREATION_EXPRESSION: return createArrayCreationExpression();
      case MiniJavaPackage.MODIFIER: return createModifier();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Goal createGoal()
  {
    GoalImpl goal = new GoalImpl();
    return goal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompilationUnit createCompilationUnit()
  {
    CompilationUnitImpl compilationUnit = new CompilationUnitImpl();
    return compilationUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDeclaration createTypeDeclaration()
  {
    TypeDeclarationImpl typeDeclaration = new TypeDeclarationImpl();
    return typeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modifiers createModifiers()
  {
    ModifiersImpl modifiers = new ModifiersImpl();
    return modifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDeclaration createClassDeclaration()
  {
    ClassDeclarationImpl classDeclaration = new ClassDeclarationImpl();
    return classDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassBody createClassBody()
  {
    ClassBodyImpl classBody = new ClassBodyImpl();
    return classBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassMemberDeclaration createClassMemberDeclaration()
  {
    ClassMemberDeclarationImpl classMemberDeclaration = new ClassMemberDeclarationImpl();
    return classMemberDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FieldDeclaration createFieldDeclaration()
  {
    FieldDeclarationImpl fieldDeclaration = new FieldDeclarationImpl();
    return fieldDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodDeclaration createMethodDeclaration()
  {
    MethodDeclarationImpl methodDeclaration = new MethodDeclarationImpl();
    return methodDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodHeader createMethodHeader()
  {
    MethodHeaderImpl methodHeader = new MethodHeaderImpl();
    return methodHeader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodBody createMethodBody()
  {
    MethodBodyImpl methodBody = new MethodBodyImpl();
    return methodBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockStatement createBlockStatement()
  {
    BlockStatementImpl blockStatement = new BlockStatementImpl();
    return blockStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalVariableDeclarationStatement createLocalVariableDeclarationStatement()
  {
    LocalVariableDeclarationStatementImpl localVariableDeclarationStatement = new LocalVariableDeclarationStatementImpl();
    return localVariableDeclarationStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalVariableDeclaration createLocalVariableDeclaration()
  {
    LocalVariableDeclarationImpl localVariableDeclaration = new LocalVariableDeclarationImpl();
    return localVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDeclarators createVariableDeclarators()
  {
    VariableDeclaratorsImpl variableDeclarators = new VariableDeclaratorsImpl();
    return variableDeclarators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDeclarator createVariableDeclarator()
  {
    VariableDeclaratorImpl variableDeclarator = new VariableDeclaratorImpl();
    return variableDeclarator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionStatement createExpressionStatement()
  {
    ExpressionStatementImpl expressionStatement = new ExpressionStatementImpl();
    return expressionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementExpression createStatementExpression()
  {
    StatementExpressionImpl statementExpression = new StatementExpressionImpl();
    return statementExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfThenStatement createIfThenStatement()
  {
    IfThenStatementImpl ifThenStatement = new IfThenStatementImpl();
    return ifThenStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfThenElseStatement createIfThenElseStatement()
  {
    IfThenElseStatementImpl ifThenElseStatement = new IfThenElseStatementImpl();
    return ifThenElseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileStatement createWhileStatement()
  {
    WhileStatementImpl whileStatement = new WhileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DoWhileStatement createDoWhileStatement()
  {
    DoWhileStatementImpl doWhileStatement = new DoWhileStatementImpl();
    return doWhileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForInit createForInit()
  {
    ForInitImpl forInit = new ForInitImpl();
    return forInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForUpdate createForUpdate()
  {
    ForUpdateImpl forUpdate = new ForUpdateImpl();
    return forUpdate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementExpressionList createStatementExpressionList()
  {
    StatementExpressionListImpl statementExpressionList = new StatementExpressionListImpl();
    return statementExpressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentExpression createAssignmentExpression()
  {
    AssignmentExpressionImpl assignmentExpression = new AssignmentExpressionImpl();
    return assignmentExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalExpression createConditionalExpression()
  {
    ConditionalExpressionImpl conditionalExpression = new ConditionalExpressionImpl();
    return conditionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfixExpression createInfixExpression()
  {
    InfixExpressionImpl infixExpression = new InfixExpressionImpl();
    return infixExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrefixExpression createPrefixExpression()
  {
    PrefixExpressionImpl prefixExpression = new PrefixExpressionImpl();
    return prefixExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostfixExpression createPostfixExpression()
  {
    PostfixExpressionImpl postfixExpression = new PostfixExpressionImpl();
    return postfixExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Suffix createSuffix()
  {
    SuffixImpl suffix = new SuffixImpl();
    return suffix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayAccess createArrayAccess()
  {
    ArrayAccessImpl arrayAccess = new ArrayAccessImpl();
    return arrayAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodInvocation createMethodInvocation()
  {
    MethodInvocationImpl methodInvocation = new MethodInvocationImpl();
    return methodInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArgumentList createArgumentList()
  {
    ArgumentListImpl argumentList = new ArgumentListImpl();
    return argumentList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Primary createPrimary()
  {
    PrimaryImpl primary = new PrimaryImpl();
    return primary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayCreationExpression createArrayCreationExpression()
  {
    ArrayCreationExpressionImpl arrayCreationExpression = new ArrayCreationExpressionImpl();
    return arrayCreationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modifier createModifier()
  {
    ModifierImpl modifier = new ModifierImpl();
    return modifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniJavaPackage getMiniJavaPackage()
  {
    return (MiniJavaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MiniJavaPackage getPackage()
  {
    return MiniJavaPackage.eINSTANCE;
  }

} //MiniJavaFactoryImpl
