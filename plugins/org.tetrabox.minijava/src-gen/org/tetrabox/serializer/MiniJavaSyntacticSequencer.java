/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.tetrabox.services.MiniJavaGrammarAccess;

@SuppressWarnings("all")
public class MiniJavaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MiniJavaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArrayCreationExpression_DimensionParserRuleCall_0_5_a;
	protected AbstractElementAlias match_ArrayCreationExpression_DimensionParserRuleCall_1_5_a;
	protected AbstractElementAlias match_ClassDeclaration_SuperParserRuleCall_2_q;
	protected AbstractElementAlias match_ForStatement___ForKeyword_0_LeftParenthesisKeyword_1__q;
	protected AbstractElementAlias match_IfThenElseStatement_IfThenStatement_ReturnStatement_WhileStatement_ReturnKeyword_0_or___IfKeyword_0_LeftParenthesisKeyword_1___or___IfKeyword_0_LeftParenthesisKeyword_1___or___WhileKeyword_0_LeftParenthesisKeyword_1__;
	protected AbstractElementAlias match_PrefixExpression_PrefixOpParserRuleCall_0_0_a;
	protected AbstractElementAlias match_Primary_ClassInstanceCreationExpressionParserRuleCall_6_or_IdentifierParserRuleCall_3_or_LiteralParserRuleCall_2_or_ThisKeyword_1_or___SuperKeyword_4_0_FieldAccessParserRuleCall_4_1__;
	protected AbstractElementAlias match_ReturnStatement_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_8_or_ReturnKeyword_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MiniJavaGrammarAccess) access;
		match_ArrayCreationExpression_DimensionParserRuleCall_0_5_a = new TokenAlias(true, true, grammarAccess.getArrayCreationExpressionAccess().getDimensionParserRuleCall_0_5());
		match_ArrayCreationExpression_DimensionParserRuleCall_1_5_a = new TokenAlias(true, true, grammarAccess.getArrayCreationExpressionAccess().getDimensionParserRuleCall_1_5());
		match_ClassDeclaration_SuperParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getClassDeclarationAccess().getSuperParserRuleCall_2());
		match_ForStatement___ForKeyword_0_LeftParenthesisKeyword_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getForStatementAccess().getForKeyword_0()), new TokenAlias(false, false, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()));
		match_IfThenElseStatement_IfThenStatement_ReturnStatement_WhileStatement_ReturnKeyword_0_or___IfKeyword_0_LeftParenthesisKeyword_1___or___IfKeyword_0_LeftParenthesisKeyword_1___or___WhileKeyword_0_LeftParenthesisKeyword_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfThenElseStatementAccess().getIfKeyword_0()), new TokenAlias(false, false, grammarAccess.getIfThenElseStatementAccess().getLeftParenthesisKeyword_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfThenStatementAccess().getIfKeyword_0()), new TokenAlias(false, false, grammarAccess.getIfThenStatementAccess().getLeftParenthesisKeyword_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()), new TokenAlias(false, false, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1())), new TokenAlias(false, false, grammarAccess.getReturnStatementAccess().getReturnKeyword_0()));
		match_PrefixExpression_PrefixOpParserRuleCall_0_0_a = new TokenAlias(true, true, grammarAccess.getPrefixExpressionAccess().getPrefixOpParserRuleCall_0_0());
		match_Primary_ClassInstanceCreationExpressionParserRuleCall_6_or_IdentifierParserRuleCall_3_or_LiteralParserRuleCall_2_or_ThisKeyword_1_or___SuperKeyword_4_0_FieldAccessParserRuleCall_4_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getSuperKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getFieldAccessParserRuleCall_4_1())), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getClassInstanceCreationExpressionParserRuleCall_6()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getIdentifierParserRuleCall_3()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_2()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getThisKeyword_1()));
		match_ReturnStatement_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_8_or_ReturnKeyword_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getReturnStatementAccess().getReturnKeyword_0()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_7()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_8()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBreakStatementRule())
			return getBreakStatementToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getClassInstanceCreationExpressionRule())
			return getClassInstanceCreationExpressionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getClassTypeRule())
			return getClassTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getContinueStatementRule())
			return getContinueStatementToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDimensionRule())
			return getDimensionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFieldAccessRule())
			return getFieldAccessToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIdentifierRule())
			return getIdentifierToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIdentifierListRule())
			return getIdentifierListToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getInfixOpRule())
			return getInfixOpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLiteralRule())
			return getLiteralToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPrefixOpRule())
			return getPrefixOpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPrimitiveTypeRule())
			return getPrimitiveTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSelectorRule())
			return getSelectorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSuperRule())
			return getSuperToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeRule())
			return getTypeToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BreakStatement:
	 * 	"break";
	 */
	protected String getBreakStatementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "break";
	}
	
	/**
	 * ClassInstanceCreationExpression:
	 * 	"new" ClassType "(" ")";
	 */
	protected String getClassInstanceCreationExpressionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "new()";
	}
	
	/**
	 * ClassType:
	 * 	Name;
	 */
	protected String getClassTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * ContinueStatement:
	 * 	"continue";
	 */
	protected String getContinueStatementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "continue";
	}
	
	/**
	 * Dimension:
	 * 	"[" "]";
	 */
	protected String getDimensionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[]";
	}
	
	/**
	 * FieldAccess:
	 * 	Selector;
	 */
	protected String getFieldAccessToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * Identifier:
	 * 	ID;
	 */
	protected String getIdentifierToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * IdentifierList:
	 * 	Identifier (',' Identifier)*;
	 */
	protected String getIdentifierListToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * InfixOp:
	 * 	"||" |
	 * 	"&&" |
	 * 	"==" |
	 * 	"!=" |
	 * 	"<" |
	 * 	">" |
	 * 	"<=" |
	 * 	">=" |
	 * 	"+" |
	 * 	"-" |
	 * 	"*" |
	 * 	"/";
	 */
	protected String getInfixOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "||";
	}
	
	/**
	 * Literal:
	 * 	IntegerLiteral |
	 * 	BooleanLiteral |
	 * 	CharacterLiteral |
	 * 	StringLiteral |
	 * 	NullLiteral;
	 */
	protected String getLiteralToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * PrefixOp:
	 * 	"-" |
	 * 	"!";
	 */
	protected String getPrefixOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * PrimitiveType:
	 * 	"int" |
	 * 	"boolean";
	 */
	protected String getPrimitiveTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "int";
	}
	
	/**
	 * Selector:
	 * 	"." Identifier;
	 */
	protected String getSelectorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * Super:
	 * 	"extends" ClassType;
	 */
	protected String getSuperToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "extends";
	}
	
	/**
	 * Type:
	 * 	PrimitiveType |
	 * 	ReferenceType;
	 */
	protected String getTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "int";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ArrayCreationExpression_DimensionParserRuleCall_0_5_a.equals(syntax))
				emit_ArrayCreationExpression_DimensionParserRuleCall_0_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArrayCreationExpression_DimensionParserRuleCall_1_5_a.equals(syntax))
				emit_ArrayCreationExpression_DimensionParserRuleCall_1_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ClassDeclaration_SuperParserRuleCall_2_q.equals(syntax))
				emit_ClassDeclaration_SuperParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForStatement___ForKeyword_0_LeftParenthesisKeyword_1__q.equals(syntax))
				emit_ForStatement___ForKeyword_0_LeftParenthesisKeyword_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfThenElseStatement_IfThenStatement_ReturnStatement_WhileStatement_ReturnKeyword_0_or___IfKeyword_0_LeftParenthesisKeyword_1___or___IfKeyword_0_LeftParenthesisKeyword_1___or___WhileKeyword_0_LeftParenthesisKeyword_1__.equals(syntax))
				emit_IfThenElseStatement_IfThenStatement_ReturnStatement_WhileStatement_ReturnKeyword_0_or___IfKeyword_0_LeftParenthesisKeyword_1___or___IfKeyword_0_LeftParenthesisKeyword_1___or___WhileKeyword_0_LeftParenthesisKeyword_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrefixExpression_PrefixOpParserRuleCall_0_0_a.equals(syntax))
				emit_PrefixExpression_PrefixOpParserRuleCall_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_ClassInstanceCreationExpressionParserRuleCall_6_or_IdentifierParserRuleCall_3_or_LiteralParserRuleCall_2_or_ThisKeyword_1_or___SuperKeyword_4_0_FieldAccessParserRuleCall_4_1__.equals(syntax))
				emit_Primary_ClassInstanceCreationExpressionParserRuleCall_6_or_IdentifierParserRuleCall_3_or_LiteralParserRuleCall_2_or_ThisKeyword_1_or___SuperKeyword_4_0_FieldAccessParserRuleCall_4_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReturnStatement_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_8_or_ReturnKeyword_0.equals(syntax))
				emit_ReturnStatement_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_8_or_ReturnKeyword_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     Dimension*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression ']' (ambiguity) (rule end)
	 *     expression=Expression ']' (ambiguity) suffixes+=Suffix
	 */
	protected void emit_ArrayCreationExpression_DimensionParserRuleCall_0_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Dimension*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression ']' (ambiguity) (rule end)
	 *     expression=Expression ']' (ambiguity) suffixes+=Suffix
	 */
	protected void emit_ArrayCreationExpression_DimensionParserRuleCall_1_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Super?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'class' Identifier (ambiguity) '{' '}' (rule start)
	 *     (rule start) 'class' Identifier (ambiguity) '{' classMembers+=ClassMemberDeclaration
	 */
	protected void emit_ClassDeclaration_SuperParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('for' '(')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) Type variableDeclarators+=VariableDeclarator
	 */
	protected void emit_ForStatement___ForKeyword_0_LeftParenthesisKeyword_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return' | ('if' '(') | ('while' '(') | ('if' '(')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) condition=InfixExpression
	 *     (rule start) (ambiguity) expressions+=PrefixExpression
	 *     (rule start) (ambiguity) left=ConditionalExpression
	 */
	protected void emit_IfThenElseStatement_IfThenStatement_ReturnStatement_WhileStatement_ReturnKeyword_0_or___IfKeyword_0_LeftParenthesisKeyword_1___or___IfKeyword_0_LeftParenthesisKeyword_1___or___WhileKeyword_0_LeftParenthesisKeyword_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     PrefixOp*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' condition=InfixExpression
	 *     (rule start) (ambiguity) '(' expressions+=PrefixExpression
	 *     (rule start) (ambiguity) '(' left=ConditionalExpression
	 *     (rule start) (ambiguity) 'new' ClassType '[' expression=Expression
	 *     (rule start) (ambiguity) 'new' PrimitiveType '[' expression=Expression
	 *     (rule start) (ambiguity) 'super' Selector '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'super' Selector '(' ')' suffixes+=Suffix
	 *     (rule start) (ambiguity) 'super' Selector '(' arguments=ArgumentList
	 *     (rule start) (ambiguity) (('super' FieldAccess) | Literal | Identifier | 'this' | ClassInstanceCreationExpression) (rule start)
	 *     (rule start) (ambiguity) (('super' FieldAccess) | Literal | Identifier | 'this' | ClassInstanceCreationExpression) suffixes+=Suffix
	 */
	protected void emit_PrefixExpression_PrefixOpParserRuleCall_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('super' FieldAccess) | Literal | Identifier | 'this' | ClassInstanceCreationExpression
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) suffixes+=Suffix
	 *     (rule start) PrefixOp* (ambiguity) (rule start)
	 *     (rule start) PrefixOp* (ambiguity) suffixes+=Suffix
	 */
	protected void emit_Primary_ClassInstanceCreationExpressionParserRuleCall_6_or_IdentifierParserRuleCall_3_or_LiteralParserRuleCall_2_or_ThisKeyword_1_or___SuperKeyword_4_0_FieldAccessParserRuleCall_4_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ContinueStatement | BreakStatement | 'return'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ReturnStatement_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_8_or_ReturnKeyword_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
