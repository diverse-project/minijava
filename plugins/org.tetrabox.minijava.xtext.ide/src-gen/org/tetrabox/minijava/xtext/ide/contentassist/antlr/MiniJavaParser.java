/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.tetrabox.minijava.xtext.ide.contentassist.antlr.internal.InternalMiniJavaParser;
import org.tetrabox.minijava.xtext.services.MiniJavaGrammarAccess;

public class MiniJavaParser extends AbstractContentAssistParser {

	@Inject
	private MiniJavaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMiniJavaParser createParser() {
		InternalMiniJavaParser result = new InternalMiniJavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getBasicAlternatives_0(), "rule__BasicType__BasicAlternatives_0");
					put(grammarAccess.getTypedElementAccess().getAlternatives(), "rule__TypedElement__Alternatives");
					put(grammarAccess.getMessageAccess().getAlternatives(), "rule__Message__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getBoolConstantAccess().getConstantAlternatives_0(), "rule__BoolConstant__ConstantAlternatives_0");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_2(), "rule__Class__Group_2__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_3(), "rule__Method__Group_3__0");
					put(grammarAccess.getMethodAccess().getGroup_3_1(), "rule__Method__Group_3_1__0");
					put(grammarAccess.getMethodBodyAccess().getGroup(), "rule__MethodBody__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2(), "rule__MethodCall__Group_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2_1(), "rule__MethodCall__Group_2_1__0");
					put(grammarAccess.getNewAccess().getGroup(), "rule__New__Group__0");
					put(grammarAccess.getNewAccess().getGroup_3(), "rule__New__Group_3__0");
					put(grammarAccess.getNewAccess().getGroup_3_1(), "rule__New__Group_3_1__0");
					put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
					put(grammarAccess.getParenAccess().getGroup(), "rule__Paren__Group__0");
					put(grammarAccess.getProgramAccess().getClassesAssignment_0(), "rule__Program__ClassesAssignment_0");
					put(grammarAccess.getProgramAccess().getMainAssignment_1(), "rule__Program__MainAssignment_1");
					put(grammarAccess.getBasicTypeAccess().getBasicAssignment(), "rule__BasicType__BasicAssignment");
					put(grammarAccess.getClassTypeAccess().getClassrefAssignment(), "rule__ClassType__ClassrefAssignment");
					put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
					put(grammarAccess.getClassAccess().getExtendsAssignment_2_1(), "rule__Class__ExtendsAssignment_2_1");
					put(grammarAccess.getClassAccess().getFieldsAssignment_4(), "rule__Class__FieldsAssignment_4");
					put(grammarAccess.getClassAccess().getMethodsAssignment_5(), "rule__Class__MethodsAssignment_5");
					put(grammarAccess.getFieldAccess().getTypeAssignment_0(), "rule__Field__TypeAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getReturntypeAssignment_0(), "rule__Method__ReturntypeAssignment_0");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getParamsAssignment_3_0(), "rule__Method__ParamsAssignment_3_0");
					put(grammarAccess.getMethodAccess().getParamsAssignment_3_1_1(), "rule__Method__ParamsAssignment_3_1_1");
					put(grammarAccess.getMethodAccess().getBodyAssignment_6(), "rule__Method__BodyAssignment_6");
					put(grammarAccess.getMethodBodyAccess().getExpressionAssignment_1(), "rule__MethodBody__ExpressionAssignment_1");
					put(grammarAccess.getExpressionAccess().getMessageAssignment_1_2(), "rule__Expression__MessageAssignment_1_2");
					put(grammarAccess.getMethodCallAccess().getNameAssignment_0(), "rule__MethodCall__NameAssignment_0");
					put(grammarAccess.getMethodCallAccess().getArgsAssignment_2_0(), "rule__MethodCall__ArgsAssignment_2_0");
					put(grammarAccess.getMethodCallAccess().getArgsAssignment_2_1_1(), "rule__MethodCall__ArgsAssignment_2_1_1");
					put(grammarAccess.getFieldSelectionAccess().getNameAssignment(), "rule__FieldSelection__NameAssignment");
					put(grammarAccess.getThisAccess().getVariableAssignment(), "rule__This__VariableAssignment");
					put(grammarAccess.getVariableAccess().getParamrefAssignment(), "rule__Variable__ParamrefAssignment");
					put(grammarAccess.getNewAccess().getTypeAssignment_1(), "rule__New__TypeAssignment_1");
					put(grammarAccess.getNewAccess().getArgsAssignment_3_0(), "rule__New__ArgsAssignment_3_0");
					put(grammarAccess.getNewAccess().getArgsAssignment_3_1_1(), "rule__New__ArgsAssignment_3_1_1");
					put(grammarAccess.getCastAccess().getTypeAssignment_1(), "rule__Cast__TypeAssignment_1");
					put(grammarAccess.getCastAccess().getObjectAssignment_3(), "rule__Cast__ObjectAssignment_3");
					put(grammarAccess.getStringConstantAccess().getConstantAssignment(), "rule__StringConstant__ConstantAssignment");
					put(grammarAccess.getIntConstantAccess().getConstantAssignment(), "rule__IntConstant__ConstantAssignment");
					put(grammarAccess.getBoolConstantAccess().getConstantAssignment(), "rule__BoolConstant__ConstantAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MiniJavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MiniJavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
