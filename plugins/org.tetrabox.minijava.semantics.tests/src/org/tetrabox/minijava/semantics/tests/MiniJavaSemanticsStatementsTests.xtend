/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.semantics.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith
import org.tetrabox.minijava.semantics.tests.util.MiniJavaTestUtil
import org.tetrabox.minijava.xtext.tests.MiniJavaInjectorProvider

import static org.tetrabox.minijava.semantics.tests.util.MiniJavaTestUtil.*

@RunWith(XtextRunner)
@InjectWith(MiniJavaInjectorProvider)
class MiniJavaSemanticsStatementsTests {
	@Inject
	extension MiniJavaTestUtil testUtil

	@Test
	def void unit_PrintStatement_single() {
		genericStatementPrintTest('''System.out.println("Hello!");''', "Hello!")
	}

	@Test
	def void unit_PrintStatement_multiple() {
		genericStatementPrintTest('''System.out.println("Hello!"); System.out.println("World!");''', "Hello!", "World!")
	}

	@Test
	def void unit_IfStatement_noelse_true() {
		genericStatementPrintTest('''if (true) { System.out.println("then"); }''', "then")
	}

	@Test
	def void unit_IfStatement_noelse_false() {
		genericStatementPrintTest('''if (false) { System.out.println("then"); }''', #[])
	}

	@Test
	def void unit_IfStatement_else_true() {
		genericStatementPrintTest('''if (true) { System.out.println("then"); } else { System.out.println("else");}''',
			"then")
	}

	@Test
	def void unit_IfStatement_else_false() {
		genericStatementPrintTest('''if (false) { System.out.println("then"); } else { System.out.println("else");}''',
			"else")
	}

	@Test
	def void unit_WhileStatement_fewsteps() {
		genericStatementPrintTest('''
			int i = 0;
			while (i < 5) { 
				System.out.println("x");
				i = i +1;
			}
		''', "x", "x", "x", "x", "x")
	}

	@Test
	def void unit_WhileStatement_false() {
		genericStatementPrintTest('''
			while (false) { 
				System.out.println("x");
			}
		''', #[])
	}

	@Test
	def void unit_ForStatement_fewstep() {
		genericStatementPrintTest('''
			for (int i = 0; i < 5; i = i+1) {
				System.out.println("x");
			}
		''', "x", "x", "x", "x", "x")
	}

	@Test
	def void unit_ForStatement_conditionfalse() {
		genericStatementPrintTest('''
			for (int i = 0; i > 5; i = i+1) {
				System.out.println("x");
			}
		''', #[])
	}

	@Test
	def void unit_Assignment_declaration_int() {
		genericStatementBindingsTest('''
			int x = 12;
		''', #{"x" -> (factory.createIntegerValue => [value = 12])})
	}

	@Test
	def void unit_Assignment_declaration_int_sum() {
		genericStatementBindingsTest('''
			int x = 12+6;
		''', #{"x" -> (factory.createIntegerValue => [value = 18])})
	}

	@Test
	def void unit_Assignment_reassignment_int() {
		genericStatementBindingsTest('''
			int x = 12+6;
			x = -9;
		''', #{"x" -> (factory.createIntegerValue => [value = -9])})
	}
	
	//TODO test return statement

}
