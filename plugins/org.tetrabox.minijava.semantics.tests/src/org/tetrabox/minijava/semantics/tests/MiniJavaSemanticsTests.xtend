/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.semantics.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.tetrabox.minijava.xtext.miniJava.Program
import org.tetrabox.minijava.xtext.tests.MiniJavaInjectorProvider

import static extension org.tetrabox.minijava.semantics.ProgramAspect.*
import org.tetrabox.minijava.dynamic.minijavadynamicdata.Value
import org.tetrabox.minijava.dynamic.minijavadynamicdata.MinijavadynamicdataFactory
import org.tetrabox.minijava.dynamic.minijavadynamicdata.Context
import java.util.function.Consumer

@RunWith(XtextRunner)
@InjectWith(MiniJavaInjectorProvider)
class MiniJavaSemanticsTests {
	@Inject
	ParseHelper<Program> parseHelper

	static val String intTypeName = "int"
	static val String booleanTypeName = "boolean"
	static val String stringTypeName = "String"

	def static void assertPrint(Context context, String... expecteds) {
		val stream = context.outputStream.stream
		Assert::assertEquals(stream.size, expecteds.size)
		var int index = 0
		for (expected : expecteds) {
			val s = stream.get(index)
			Assert::assertEquals("List of printed strings should be of same size.", expected, s)
			index++
		}
	}

	def static Value get(Context initialContext, String symbol) {
		return initialContext.childrenContext.bindings.findFirst[it.symbol.name == symbol].value
	}

	public static val factory = MinijavadynamicdataFactory::eINSTANCE

	private def void genericTest(String program, Consumer<Context> oracle) {
		val Program result = parseHelper.parse(program)
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		val context = result.execute
		oracle.accept(context)
	}

	private def void genericExpressionTest(String type, String expression, Value expectedValue) {
		val program = '''class Main  {
			public static void main(String[] args) {
				«type» x = «expression»;
			} 
		}'''

		genericTest(program, [ c |
			val result = c.get("x")
			Assert::assertTrue(MiniJavaValueEquals::equals(
				expectedValue,
				result
			))
		])
	}

	private def void genericStatementTest(String statement, Consumer<Context> oracle) {
		val program = '''class Main  {
			public static void main(String[] args) {
				«statement»
			} 
		}'''
		genericTest(program, oracle)
	}

	private def void genericStatementPrintTest(String statement, String... expected) {
		genericStatementTest(statement, [Context c|Assert::assertEquals(expected.toList, c.outputStream.stream)])
	}

	@Test
	def void unit_IntConstant_1() {
		val expected = factory.createIntegerValue => [value = 1]
		genericExpressionTest(intTypeName, "1", expected)
	}

	@Test
	def void unit_IntConstant_0() {
		val expected = factory.createIntegerValue => [value = 0]
		genericExpressionTest(intTypeName, "0", expected)
	}

	@Test
	def void unit_IntConstant_min_1() {
		val expected = factory.createIntegerValue => [value = -1]
		genericExpressionTest(intTypeName, "-1", expected)
	}

	@Test
	def void unit_IntConstant_min_MAX_VALUE() {
		val expected = factory.createIntegerValue => [value = -Integer::MAX_VALUE]
		genericExpressionTest(intTypeName, '''-«Integer::MAX_VALUE»''', expected)
	}

	@Test
	def void unit_IntConstant_MAX_VALUE() {
		val expected = factory.createIntegerValue => [value = Integer::MAX_VALUE]
		genericExpressionTest(intTypeName, Integer::MAX_VALUE.toString, expected)
	}

	@Test
	def void unit_BoolConstant_true() {
		val expected = factory.createBooleanValue => [value = true]
		genericExpressionTest(booleanTypeName, "true", expected)
	}

	@Test
	def void unit_BoolConstant_false() {
		val expected = factory.createBooleanValue => [value = false]
		genericExpressionTest(booleanTypeName, "false", expected)
	}

	@Test
	def void unit_StringConstant_empty() {
		val expected = factory.createStringValue => [value = ""]
		genericExpressionTest(stringTypeName, '''""''', expected)
	}

	@Test
	def void unit_StringConstant_short() {
		val expected = factory.createStringValue => [value = "short"]
		genericExpressionTest(stringTypeName, '''"short"''', expected)
	}

	@Test
	def void unit_StringConstant_long() {
		val expected = factory.createStringValue => [value = Integer::MAX_VALUE.toString]
		genericExpressionTest(stringTypeName, '''"«Integer::MAX_VALUE.toString»"''', expected)
	}

	@Test
	def void unit_PrintStatement_single() {
		genericStatementPrintTest('''System.out.println("Hello!");''', "Hello!")
	}

	@Test
	def void unit_PrintStatement_multiple() {
		genericStatementPrintTest('''System.out.println("Hello!"); System.out.println("World!");''', "Hello!", "World!")
	}

	// TODO return
	@Test
	def void unit_IfStatement_noelse_true() {
		genericStatementPrintTest('''if (true) { System.out.println("then"); }''', "then")
	}

	@Test
	def void unit_IfStatement_noelse_false() {
		genericStatementPrintTest('''if (false) { System.out.println("then"); }''', #[])
	}

	@Test
	def void unit_IfStatement_else_true() {
		genericStatementPrintTest('''if (true) { System.out.println("then"); } else { System.out.println("else");}''',
			"then")
	}

	@Test
	def void unit_IfStatement_else_false() {
		genericStatementPrintTest('''if (false) { System.out.println("then"); } else { System.out.println("else");}''',
			"else")
	}

	@Test
	def void unit_WhileStatement_fewsteps() {
		genericStatementPrintTest('''
			int i = 0;
			while (i < 5) { 
				System.out.println("x");
				i = i +1;
			}
		''', "x", "x", "x", "x", "x")
	}

	@Test
	def void unit_WhileStatement_false() {
		genericStatementPrintTest('''
			while (false) { 
				System.out.println("x");
			}
		''', #[])
	}

	@Test
	def void unit_ForStatement_fewstep() {
		genericStatementPrintTest('''
			for (int i = 0; i < 10; i = i+1) {
				
			}
		''', #[])
	}

	@Test
	def void model1() {
		val expected = #["start"] + (0 .. 9).map[it.toString]
		genericTest('''
class Main  {
	public static void main(String[] args) {
		System.out.println("start");
		int j = 12;
		boolean b = j > 24;
		for (int i = 0; i<10; i = i+1) {
			int x = j;
			System.out.println(i);
		}
	} 
}
''', [c|assertPrint(c, expected)])
	}

}
