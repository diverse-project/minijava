/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.semantics.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.tetrabox.minijava.xtext.miniJava.Program
import org.tetrabox.minijava.xtext.tests.MiniJavaInjectorProvider

import static extension org.tetrabox.minijava.semantics.ProgramAspect.*
import org.tetrabox.minijava.dynamic.minijavadynamicdata.Value
import org.tetrabox.minijava.dynamic.minijavadynamicdata.MinijavadynamicdataFactory
import org.tetrabox.minijava.dynamic.minijavadynamicdata.Context

@RunWith(XtextRunner)
@InjectWith(MiniJavaInjectorProvider)
class MiniJavaSemanticsTest {
	@Inject
	ParseHelper<Program> parseHelper

	def static void assertPrint(Context context, String... expecteds) {
		val stream = context.outputStream.stream
		Assert::assertEquals(stream.size, expecteds.size)
		var int index = 0
		for (expected : expecteds) {
			val s = stream.get(index)
			Assert::assertEquals("List of printed strings should be of same size.",expected, s)
			index++
		}
	}

//	private def void genericTest(String program, Value expectedOutput) {
//		val Program result = parseHelper.parse(program)
//		Assert.assertNotNull(result)
//		Assert.assertTrue(result.eResource.errors.isEmpty)
//		result.execute
//	}
//
//	@Test
//	def void testInteger() {
//		val expected = MinijavadynamicdataFactory.eINSTANCE.createIntegerValue => [value = 1]
//		genericTest("1", expected)
//	}
//	
//		@Test
//	def void testBoolean() {
//		val expected = MinijavadynamicdataFactory.eINSTANCE.createBooleanValue => [value = true]
//		genericTest("true", expected)
//	}
//	
//		@Test
//	def void testString() {
//		val expected = MinijavadynamicdataFactory.eINSTANCE.createStringValue => [value = "yay"]
//		genericTest('''"yay"''', expected)
//	}
	@Test
	def void longModel() {
		val Program result = parseHelper.parse('''
class Main  {
	public static void main(String[] args) {
		System.out.println("start");
		int j = 12;
		boolean b = j > 24;
		for (int i = 0; i<10; i = i+1) {
			int x = j;
			System.out.println(i);
		}
	} 
}
''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		val Context context = result.execute
		val expected = #["start"] + (0 .. 9).map[it.toString]
		assertPrint(context, expected)
	}

}
