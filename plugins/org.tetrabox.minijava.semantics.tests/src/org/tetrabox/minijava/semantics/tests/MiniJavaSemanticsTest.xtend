/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.semantics.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.tetrabox.minijava.xtext.miniJava.Program
import org.tetrabox.minijava.xtext.tests.MiniJavaInjectorProvider

import static extension org.tetrabox.minijava.semantics.ProgramAspect.*
import org.tetrabox.minijava.dynamic.minijavadynamicdata.Value
import org.tetrabox.minijava.dynamic.minijavadynamicdata.MinijavadynamicdataFactory

@RunWith(XtextRunner)
@InjectWith(MiniJavaInjectorProvider)
class MiniJavaSemanticsTest {
	@Inject
	ParseHelper<Program> parseHelper

	private def void genericTest(String program, Value expectedOutput) {
		val Program result = parseHelper.parse(program)
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		val output = result.execute
		Assert.assertTrue(MiniJavaValueEquals::equals(expectedOutput, output))
	}

	@Test
	def void testInteger() {
		val expected = MinijavadynamicdataFactory.eINSTANCE.createIntegerValue => [value = 1]
		genericTest("1", expected)
	}
	
		@Test
	def void testBoolean() {
		val expected = MinijavadynamicdataFactory.eINSTANCE.createBooleanValue => [value = true]
		genericTest("true", expected)
	}
	
		@Test
	def void testString() {
		val expected = MinijavadynamicdataFactory.eINSTANCE.createStringValue => [value = "yay"]
		genericTest('''"yay"''', expected)
	}

	@Test
	def void longModel() {
		val Program result = parseHelper.parse('''class A {
		
		}
		
		class B extends A{
		
			int x;
		}
		
		class Pair {
		
			int fst;
			int snd;  
			
			int other() {
				return 1;
			}
			
			Pair do() {
				return this;
			}
			
			A test(B i) {
				return (A)i;
			// return new B(1);
			}
		
		    Pair setfst(int newfst, String s)  {
				return new Pair(newfst, this.snd);
			}
			
		    Pair setsnd(int newscd){
				return new Pair(this.fst, newscd);
			}
		}
		
		//Test
		//new Pair(1, 2).setfst(1,"")
		new Pair(1,2).test(   (B) new A() )      ''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		result.execute
	}

	@Test
	def void test3() {
		val Program result = parseHelper.parse('''
				
		class B {
			int x;
		}
		
		class Pair {
		
			int fst;
			int snd;
			B b;
			
		}
		
		new Pair(12,56,new B(2)) ''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		result.execute
	}

}
