/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniJavaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassesClassParserRuleCall_0_0 = (RuleCall)cClassesAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainExpressionParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		//Program:
		//	classes+=Class*
		//	main=Expression?;
		@Override public ParserRule getRule() { return rule; }
		
		//classes+=Class* main=Expression?
		public Group getGroup() { return cGroup; }
		
		//classes+=Class*
		public Assignment getClassesAssignment_0() { return cClassesAssignment_0; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_0_0() { return cClassesClassParserRuleCall_0_0; }
		
		//main=Expression?
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }
		
		//Expression
		public RuleCall getMainExpressionParserRuleCall_1_0() { return cMainExpressionParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	BasicType | ClassType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | ClassType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//ClassType
		public RuleCall getClassTypeParserRuleCall_1() { return cClassTypeParserRuleCall_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.BasicType");
		private final Assignment cBasicAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBasicAlternatives_0 = (Alternatives)cBasicAssignment.eContents().get(0);
		private final Keyword cBasicIntKeyword_0_0 = (Keyword)cBasicAlternatives_0.eContents().get(0);
		private final Keyword cBasicBooleanKeyword_0_1 = (Keyword)cBasicAlternatives_0.eContents().get(1);
		private final Keyword cBasicStringKeyword_0_2 = (Keyword)cBasicAlternatives_0.eContents().get(2);
		
		//BasicType:
		//	basic=('int' | 'boolean' | 'String');
		@Override public ParserRule getRule() { return rule; }
		
		//basic=('int' | 'boolean' | 'String')
		public Assignment getBasicAssignment() { return cBasicAssignment; }
		
		//('int' | 'boolean' | 'String')
		public Alternatives getBasicAlternatives_0() { return cBasicAlternatives_0; }
		
		//'int'
		public Keyword getBasicIntKeyword_0_0() { return cBasicIntKeyword_0_0; }
		
		//'boolean'
		public Keyword getBasicBooleanKeyword_0_1() { return cBasicBooleanKeyword_0_1; }
		
		//'String'
		public Keyword getBasicStringKeyword_0_2() { return cBasicStringKeyword_0_2; }
	}
	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.ClassType");
		private final Assignment cClassrefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cClassrefClassCrossReference_0 = (CrossReference)cClassrefAssignment.eContents().get(0);
		private final RuleCall cClassrefClassIDTerminalRuleCall_0_1 = (RuleCall)cClassrefClassCrossReference_0.eContents().get(1);
		
		//ClassType:
		//	classref=[Class];
		@Override public ParserRule getRule() { return rule; }
		
		//classref=[Class]
		public Assignment getClassrefAssignment() { return cClassrefAssignment; }
		
		//[Class]
		public CrossReference getClassrefClassCrossReference_0() { return cClassrefClassCrossReference_0; }
		
		//ID
		public RuleCall getClassrefClassIDTerminalRuleCall_0_1() { return cClassrefClassIDTerminalRuleCall_0_1; }
	}
	public class TypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.TypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedElement:
		//	Field | Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsClassCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Assignment cMethodsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodsMethodParserRuleCall_5_0 = (RuleCall)cMethodsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Class:
		//	'class' name=ID ('extends' extends=[Class])? '{'
		//	fields+=Field*
		//	methods+=Method*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID ('extends' extends=[Class])? '{' fields+=Field* methods+=Method* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' extends=[Class])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extends=[Class]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }
		
		//[Class]
		public CrossReference getExtendsClassCrossReference_2_1_0() { return cExtendsClassCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendsClassIDTerminalRuleCall_2_1_0_1() { return cExtendsClassIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_0() { return cFieldsFieldParserRuleCall_4_0; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment_5() { return cMethodsAssignment_5; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_5_0() { return cMethodsMethodParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Field:
		//	type=Type name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturntypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturntypeTypeParserRuleCall_0_0 = (RuleCall)cReturntypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyMethodBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Method:
		//	returntype=Type name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{'
		//	body=MethodBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//returntype=Type name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{' body=MethodBody '}'
		public Group getGroup() { return cGroup; }
		
		//returntype=Type
		public Assignment getReturntypeAssignment_0() { return cReturntypeAssignment_0; }
		
		//Type
		public RuleCall getReturntypeTypeParserRuleCall_0_0() { return cReturntypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//body=MethodBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_6_0() { return cBodyMethodBodyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.MethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MethodBody:
		//	'return' expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMessageAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_1_2_0 = (RuleCall)cMessageAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	TerminalExpression ({Selection.receiver=current} '.' message=Message)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression ({Selection.receiver=current} '.' message=Message)*
		public Group getGroup() { return cGroup; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//({Selection.receiver=current} '.' message=Message)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Selection.receiver=current}
		public Action getSelectionReceiverAction_1_0() { return cSelectionReceiverAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//message=Message
		public Assignment getMessageAssignment_1_2() { return cMessageAssignment_1_2; }
		
		//Message
		public RuleCall getMessageMessageParserRuleCall_1_2_0() { return cMessageMessageParserRuleCall_1_2_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldSelectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Message:
		//	MethodCall | FieldSelection;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodCall | FieldSelection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodCall
		public RuleCall getMethodCallParserRuleCall_0() { return cMethodCallParserRuleCall_0; }
		
		//FieldSelection
		public RuleCall getFieldSelectionParserRuleCall_1() { return cFieldSelectionParserRuleCall_1; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameMethodCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameMethodIDTerminalRuleCall_0_0_1 = (RuleCall)cNameMethodCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsArgumentParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsArgumentParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//	name=[Method] '(' (args+=Argument (',' args+=Argument)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Method] '(' (args+=Argument (',' args+=Argument)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//name=[Method]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Method]
		public CrossReference getNameMethodCrossReference_0_0() { return cNameMethodCrossReference_0_0; }
		
		//ID
		public RuleCall getNameMethodIDTerminalRuleCall_0_0_1() { return cNameMethodIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args+=Argument (',' args+=Argument)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Argument
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Argument
		public RuleCall getArgsArgumentParserRuleCall_2_0_0() { return cArgsArgumentParserRuleCall_2_0_0; }
		
		//(',' args+=Argument)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=Argument
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Argument
		public RuleCall getArgsArgumentParserRuleCall_2_1_1_0() { return cArgsArgumentParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FieldSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.FieldSelection");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameFieldCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameFieldIDTerminalRuleCall_0_1 = (RuleCall)cNameFieldCrossReference_0.eContents().get(1);
		
		//FieldSelection:
		//	name=[Field];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Field]
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//[Field]
		public CrossReference getNameFieldCrossReference_0() { return cNameFieldCrossReference_0; }
		
		//ID
		public RuleCall getNameFieldIDTerminalRuleCall_0_1() { return cNameFieldIDTerminalRuleCall_0_1; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cThisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNewParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCastParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParenParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TerminalExpression Expression:
		//	This | Variable | New | Cast | Constant | Paren;
		@Override public ParserRule getRule() { return rule; }
		
		//This | Variable | New | Cast | Constant | Paren
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//This
		public RuleCall getThisParserRuleCall_0() { return cThisParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//New
		public RuleCall getNewParserRuleCall_2() { return cNewParserRuleCall_2; }
		
		//Cast
		public RuleCall getCastParserRuleCall_3() { return cCastParserRuleCall_3; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_4() { return cConstantParserRuleCall_4; }
		
		//Paren
		public RuleCall getParenParserRuleCall_5() { return cParenParserRuleCall_5; }
	}
	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.This");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVariableThisKeyword_0 = (Keyword)cVariableAssignment.eContents().get(0);
		
		//This:
		//	variable='this';
		@Override public ParserRule getRule() { return rule; }
		
		//variable='this'
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//'this'
		public Keyword getVariableThisKeyword_0() { return cVariableThisKeyword_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Variable");
		private final Assignment cParamrefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParamrefParameterCrossReference_0 = (CrossReference)cParamrefAssignment.eContents().get(0);
		private final RuleCall cParamrefParameterIDTerminalRuleCall_0_1 = (RuleCall)cParamrefParameterCrossReference_0.eContents().get(1);
		
		//Variable:
		//	paramref=[Parameter];
		@Override public ParserRule getRule() { return rule; }
		
		//paramref=[Parameter]
		public Assignment getParamrefAssignment() { return cParamrefAssignment; }
		
		//[Parameter]
		public CrossReference getParamrefParameterCrossReference_0() { return cParamrefParameterCrossReference_0; }
		
		//ID
		public RuleCall getParamrefParameterIDTerminalRuleCall_0_1() { return cParamrefParameterIDTerminalRuleCall_0_1; }
	}
	public class NewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.New");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsArgumentParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//New:
		//	'new' type=ClassType '(' (args+=Argument (',' args+=Argument)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' type=ClassType '(' (args+=Argument (',' args+=Argument)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//type=ClassType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ClassType
		public RuleCall getTypeClassTypeParserRuleCall_1_0() { return cTypeClassTypeParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=Argument (',' args+=Argument)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=Argument
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//Argument
		public RuleCall getArgsArgumentParserRuleCall_3_0_0() { return cArgsArgumentParserRuleCall_3_0_0; }
		
		//(',' args+=Argument)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=Argument
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//Argument
		public RuleCall getArgsArgumentParserRuleCall_3_1_1_0() { return cArgsArgumentParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectTerminalExpressionParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		
		//Cast:
		//	=> '(' type=ClassType ')' object=TerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> '(' type=ClassType ')' object=TerminalExpression
		public Group getGroup() { return cGroup; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//type=ClassType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ClassType
		public RuleCall getTypeClassTypeParserRuleCall_1_0() { return cTypeClassTypeParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//object=TerminalExpression
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }
		
		//TerminalExpression
		public RuleCall getObjectTerminalExpressionParserRuleCall_3_0() { return cObjectTerminalExpressionParserRuleCall_3_0; }
	}
	public class ParenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Paren");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Paren Expression:
		//	'(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	IntConstant | BoolConstant | StringConstant;
		@Override public ParserRule getRule() { return rule; }
		
		//IntConstant | BoolConstant | StringConstant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntConstant
		public RuleCall getIntConstantParserRuleCall_0() { return cIntConstantParserRuleCall_0; }
		
		//BoolConstant
		public RuleCall getBoolConstantParserRuleCall_1() { return cBoolConstantParserRuleCall_1; }
		
		//StringConstant
		public RuleCall getStringConstantParserRuleCall_2() { return cStringConstantParserRuleCall_2; }
	}
	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.StringConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantSTRINGTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//StringConstant:
		//	constant=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//constant=STRING
		public Assignment getConstantAssignment() { return cConstantAssignment; }
		
		//STRING
		public RuleCall getConstantSTRINGTerminalRuleCall_0() { return cConstantSTRINGTerminalRuleCall_0; }
	}
	public class IntConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.IntConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantINTTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//IntConstant:
		//	constant=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//constant=INT
		public Assignment getConstantAssignment() { return cConstantAssignment; }
		
		//INT
		public RuleCall getConstantINTTerminalRuleCall_0() { return cConstantINTTerminalRuleCall_0; }
	}
	public class BoolConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.BoolConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cConstantAlternatives_0 = (Alternatives)cConstantAssignment.eContents().get(0);
		private final Keyword cConstantTrueKeyword_0_0 = (Keyword)cConstantAlternatives_0.eContents().get(0);
		private final Keyword cConstantFalseKeyword_0_1 = (Keyword)cConstantAlternatives_0.eContents().get(1);
		
		//BoolConstant:
		//	constant=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//constant=('true' | 'false')
		public Assignment getConstantAssignment() { return cConstantAssignment; }
		
		//('true' | 'false')
		public Alternatives getConstantAlternatives_0() { return cConstantAlternatives_0; }
		
		//'true'
		public Keyword getConstantTrueKeyword_0_0() { return cConstantTrueKeyword_0_0; }
		
		//'false'
		public Keyword getConstantFalseKeyword_0_1() { return cConstantFalseKeyword_0_1; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Argument");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Argument:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	
	
	private final ProgramElements pProgram;
	private final TypeElements pType;
	private final BasicTypeElements pBasicType;
	private final ClassTypeElements pClassType;
	private final TypedElementElements pTypedElement;
	private final ClassElements pClass;
	private final FieldElements pField;
	private final ParameterElements pParameter;
	private final MethodElements pMethod;
	private final MethodBodyElements pMethodBody;
	private final ExpressionElements pExpression;
	private final MessageElements pMessage;
	private final MethodCallElements pMethodCall;
	private final FieldSelectionElements pFieldSelection;
	private final TerminalExpressionElements pTerminalExpression;
	private final ThisElements pThis;
	private final VariableElements pVariable;
	private final NewElements pNew;
	private final CastElements pCast;
	private final ParenElements pParen;
	private final ConstantElements pConstant;
	private final StringConstantElements pStringConstant;
	private final IntConstantElements pIntConstant;
	private final BoolConstantElements pBoolConstant;
	private final ArgumentElements pArgument;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniJavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pType = new TypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pClassType = new ClassTypeElements();
		this.pTypedElement = new TypedElementElements();
		this.pClass = new ClassElements();
		this.pField = new FieldElements();
		this.pParameter = new ParameterElements();
		this.pMethod = new MethodElements();
		this.pMethodBody = new MethodBodyElements();
		this.pExpression = new ExpressionElements();
		this.pMessage = new MessageElements();
		this.pMethodCall = new MethodCallElements();
		this.pFieldSelection = new FieldSelectionElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pThis = new ThisElements();
		this.pVariable = new VariableElements();
		this.pNew = new NewElements();
		this.pCast = new CastElements();
		this.pParen = new ParenElements();
		this.pConstant = new ConstantElements();
		this.pStringConstant = new StringConstantElements();
		this.pIntConstant = new IntConstantElements();
		this.pBoolConstant = new BoolConstantElements();
		this.pArgument = new ArgumentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.tetrabox.minijava.xtext.MiniJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	classes+=Class*
	//	main=Expression?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Type:
	//	BasicType | ClassType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//BasicType:
	//	basic=('int' | 'boolean' | 'String');
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//ClassType:
	//	classref=[Class];
	public ClassTypeElements getClassTypeAccess() {
		return pClassType;
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//TypedElement:
	//	Field | Parameter;
	public TypedElementElements getTypedElementAccess() {
		return pTypedElement;
	}
	
	public ParserRule getTypedElementRule() {
		return getTypedElementAccess().getRule();
	}
	
	//Class:
	//	'class' name=ID ('extends' extends=[Class])? '{'
	//	fields+=Field*
	//	methods+=Method*
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Field:
	//	type=Type name=ID ';';
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Parameter:
	//	type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Method:
	//	returntype=Type name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{'
	//	body=MethodBody
	//	'}';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//MethodBody:
	//	'return' expression=Expression ';';
	public MethodBodyElements getMethodBodyAccess() {
		return pMethodBody;
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}
	
	//Expression:
	//	TerminalExpression ({Selection.receiver=current} '.' message=Message)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Message:
	//	MethodCall | FieldSelection;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//MethodCall:
	//	name=[Method] '(' (args+=Argument (',' args+=Argument)*)? ')';
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//FieldSelection:
	//	name=[Field];
	public FieldSelectionElements getFieldSelectionAccess() {
		return pFieldSelection;
	}
	
	public ParserRule getFieldSelectionRule() {
		return getFieldSelectionAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	This | Variable | New | Cast | Constant | Paren;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//This:
	//	variable='this';
	public ThisElements getThisAccess() {
		return pThis;
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}
	
	//Variable:
	//	paramref=[Parameter];
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//New:
	//	'new' type=ClassType '(' (args+=Argument (',' args+=Argument)*)? ')';
	public NewElements getNewAccess() {
		return pNew;
	}
	
	public ParserRule getNewRule() {
		return getNewAccess().getRule();
	}
	
	//Cast:
	//	=> '(' type=ClassType ')' object=TerminalExpression;
	public CastElements getCastAccess() {
		return pCast;
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}
	
	//Paren Expression:
	//	'(' Expression ')';
	public ParenElements getParenAccess() {
		return pParen;
	}
	
	public ParserRule getParenRule() {
		return getParenAccess().getRule();
	}
	
	//Constant:
	//	IntConstant | BoolConstant | StringConstant;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//StringConstant:
	//	constant=STRING;
	public StringConstantElements getStringConstantAccess() {
		return pStringConstant;
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}
	
	//IntConstant:
	//	constant=INT;
	public IntConstantElements getIntConstantAccess() {
		return pIntConstant;
	}
	
	public ParserRule getIntConstantRule() {
		return getIntConstantAccess().getRule();
	}
	
	//BoolConstant:
	//	constant=('true' | 'false');
	public BoolConstantElements getBoolConstantAccess() {
		return pBoolConstant;
	}
	
	public ParserRule getBoolConstantRule() {
		return getBoolConstantAccess().getRule();
	}
	
	//Argument:
	//	Expression;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
