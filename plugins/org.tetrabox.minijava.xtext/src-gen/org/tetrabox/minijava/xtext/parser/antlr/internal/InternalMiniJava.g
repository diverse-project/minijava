/*
 * generated by Xtext 2.12.0
 */
grammar InternalMiniJava;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.tetrabox.minijava.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.tetrabox.minijava.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.tetrabox.minijava.xtext.services.MiniJavaGrammarAccess;

}

@parser::members {

 	private MiniJavaGrammarAccess grammarAccess;

    public InternalMiniJavaParser(TokenStream input, MiniJavaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MiniJavaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgramAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			((
				ruleClass
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getClassesClassParserRuleCall_1_0());
				}
				lv_classes_1_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"classes",
						lv_classes_1_0,
						"org.tetrabox.minijava.xtext.MiniJava.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getClassAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getClassAccess().getExtendsClassCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getFieldsFieldParserRuleCall_4_0());
				}
				lv_fields_5_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"fields",
						lv_fields_5_0,
						"org.tetrabox.minijava.xtext.MiniJava.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getMethodsMethodParserRuleCall_5_0());
				}
				lv_methods_6_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"methods",
						lv_methods_6_0,
						"org.tetrabox.minijava.xtext.MiniJava.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getMainMainParserRuleCall_6_0());
				}
				lv_main_7_0=ruleMain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"main",
						lv_main_7_0,
						"org.tetrabox.minijava.xtext.MiniJava.Main");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='public'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainAccess().getPublicKeyword_0());
		}
		otherlv_1='static'
		{
			newLeafNode(otherlv_1, grammarAccess.getMainAccess().getStaticKeyword_1());
		}
		otherlv_2='void'
		{
			newLeafNode(otherlv_2, grammarAccess.getMainAccess().getVoidKeyword_2());
		}
		otherlv_3='main'
		{
			newLeafNode(otherlv_3, grammarAccess.getMainAccess().getMainKeyword_3());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getMainAccess().getLeftParenthesisKeyword_4());
		}
		otherlv_5='String'
		{
			newLeafNode(otherlv_5, grammarAccess.getMainAccess().getStringKeyword_5());
		}
		otherlv_6='['
		{
			newLeafNode(otherlv_6, grammarAccess.getMainAccess().getLeftSquareBracketKeyword_6());
		}
		otherlv_7=']'
		{
			newLeafNode(otherlv_7, grammarAccess.getMainAccess().getRightSquareBracketKeyword_7());
		}
		this_ID_8=RULE_ID
		{
			newLeafNode(this_ID_8, grammarAccess.getMainAccess().getIDTerminalRuleCall_8());
		}
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getMainAccess().getRightParenthesisKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getBodyMethodBodyParserRuleCall_10_0());
				}
				lv_body_10_0=ruleMethodBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"org.tetrabox.minijava.xtext.MiniJava.MethodBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getBasicTypeParserRuleCall_0());
		}
		this_BasicType_0=ruleBasicType
		{
			$current = $this_BasicType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getClassTypeParserRuleCall_1());
		}
		this_ClassType_1=ruleClassType
		{
			$current = $this_ClassType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current; }
	EOF;

// Rule BasicType
ruleBasicType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_basic_0_1='int'
				{
					newLeafNode(lv_basic_0_1, grammarAccess.getBasicTypeAccess().getBasicIntKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "basic", lv_basic_0_1, null);
				}
				    |
				lv_basic_0_2='boolean'
				{
					newLeafNode(lv_basic_0_2, grammarAccess.getBasicTypeAccess().getBasicBooleanKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "basic", lv_basic_0_2, null);
				}
				    |
				lv_basic_0_3='String'
				{
					newLeafNode(lv_basic_0_3, grammarAccess.getBasicTypeAccess().getBasicStringKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "basic", lv_basic_0_3, null);
				}
			)
		)
	)
;

// Entry rule entryRuleClassType
entryRuleClassType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassTypeRule()); }
	iv_ruleClassType=ruleClassType
	{ $current=$iv_ruleClassType.current; }
	EOF;

// Rule ClassType
ruleClassType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getClassTypeRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getClassTypeAccess().getClassrefClassCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getReturntypeTypeParserRuleCall_0_0());
				}
				lv_returntype_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"returntype",
						lv_returntype_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_0_0());
					}
					lv_params_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_1_1_0());
						}
						lv_params_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"org.tetrabox.minijava.xtext.MiniJava.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getBodyMethodBodyParserRuleCall_5_0());
				}
				lv_body_7_0=ruleMethodBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"body",
						lv_body_7_0,
						"org.tetrabox.minijava.xtext.MiniJava.MethodBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	iv_ruleMethodBody=ruleMethodBody
	{ $current=$iv_ruleMethodBody.current; }
	EOF;

// Rule MethodBody
ruleMethodBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodBodyAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodBodyAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodBodyRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.tetrabox.minijava.xtext.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodBodyAccess().getSemicolonKeyword_2());
		}
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodBodyAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0());
		}
		this_TerminalExpression_0=ruleTerminalExpression
		{
			$current = $this_TerminalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getSelectionReceiverAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getMessageMessageParserRuleCall_1_2_0());
					}
					lv_message_3_0=ruleMessage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"message",
							lv_message_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.Message");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_ruleMessage=ruleMessage
	{ $current=$iv_ruleMessage.current; }
	EOF;

// Rule Message
ruleMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMessageAccess().getMethodCallParserRuleCall_0());
		}
		this_MethodCall_0=ruleMethodCall
		{
			$current = $this_MethodCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageAccess().getFieldSelectionParserRuleCall_1());
		}
		this_FieldSelection_1=ruleFieldSelection
		{
			$current = $this_FieldSelection_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	iv_ruleMethodCall=ruleMethodCall
	{ $current=$iv_ruleMethodCall.current; }
	EOF;

// Rule MethodCall
ruleMethodCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getMethodCallAccess().getNameMethodCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodCallAccess().getArgsArgumentParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodCallRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"org.tetrabox.minijava.xtext.MiniJava.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getMethodCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodCallAccess().getArgsArgumentParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodCallRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"org.tetrabox.minijava.xtext.MiniJava.Argument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFieldSelection
entryRuleFieldSelection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldSelectionRule()); }
	iv_ruleFieldSelection=ruleFieldSelection
	{ $current=$iv_ruleFieldSelection.current; }
	EOF;

// Rule FieldSelection
ruleFieldSelection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFieldSelectionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getFieldSelectionAccess().getNameFieldCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	iv_ruleTerminalExpression=ruleTerminalExpression
	{ $current=$iv_ruleTerminalExpression.current; }
	EOF;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getThisParserRuleCall_0());
		}
		this_This_0=ruleThis
		{
			$current = $this_This_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariableParserRuleCall_1());
		}
		this_Variable_1=ruleVariable
		{
			$current = $this_Variable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getNewParserRuleCall_2());
		}
		this_New_2=ruleNew
		{
			$current = $this_New_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			('(')=>
			{
				newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCastParserRuleCall_3());
			}
			this_Cast_3=ruleCast
			{
				$current = $this_Cast_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getConstantParserRuleCall_4());
		}
		this_Constant_4=ruleConstant
		{
			$current = $this_Constant_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getParenParserRuleCall_5());
		}
		this_Paren_5=ruleParen
		{
			$current = $this_Paren_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThisRule()); }
	iv_ruleThis=ruleThis
	{ $current=$iv_ruleThis.current; }
	EOF;

// Rule This
ruleThis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_variable_0_0='this'
			{
				newLeafNode(lv_variable_0_0, grammarAccess.getThisAccess().getVariableThisKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getThisRule());
				}
				setWithLastConsumed($current, "variable", lv_variable_0_0, "this");
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getParamrefParameterCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleNew
entryRuleNew returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewRule()); }
	iv_ruleNew=ruleNew
	{ $current=$iv_ruleNew.current; }
	EOF;

// Rule New
ruleNew returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='new'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewAccess().getNewKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNewAccess().getTypeClassTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleClassType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.tetrabox.minijava.xtext.MiniJava.ClassType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getNewAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNewAccess().getArgsArgumentParserRuleCall_3_0_0());
					}
					lv_args_3_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNewRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getNewAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNewAccess().getArgsArgumentParserRuleCall_3_1_1_0());
						}
						lv_args_5_0=ruleArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNewRule());
							}
							add(
								$current,
								"args",
								lv_args_5_0,
								"org.tetrabox.minijava.xtext.MiniJava.Argument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getNewAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCastRule()); }
	iv_ruleCast=ruleCast
	{ $current=$iv_ruleCast.current; }
	EOF;

// Rule Cast
ruleCast returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			('(')=>
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getCastAccess().getLeftParenthesisKeyword_0());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCastAccess().getTypeClassTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleClassType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCastRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.tetrabox.minijava.xtext.MiniJava.ClassType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getCastAccess().getRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCastAccess().getObjectTerminalExpressionParserRuleCall_3_0());
				}
				lv_object_3_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCastRule());
					}
					set(
						$current,
						"object",
						lv_object_3_0,
						"org.tetrabox.minijava.xtext.MiniJava.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParen
entryRuleParen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenRule()); }
	iv_ruleParen=ruleParen
	{ $current=$iv_ruleParen.current; }
	EOF;

// Rule Paren
ruleParen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParenAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getParenAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParenAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_0());
		}
		this_IntConstant_0=ruleIntConstant
		{
			$current = $this_IntConstant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getBoolConstantParserRuleCall_1());
		}
		this_BoolConstant_1=ruleBoolConstant
		{
			$current = $this_BoolConstant_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_2());
		}
		this_StringConstant_2=ruleStringConstant
		{
			$current = $this_StringConstant_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	iv_ruleStringConstant=ruleStringConstant
	{ $current=$iv_ruleStringConstant.current; }
	EOF;

// Rule StringConstant
ruleStringConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_constant_0_0=RULE_STRING
			{
				newLeafNode(lv_constant_0_0, grammarAccess.getStringConstantAccess().getConstantSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringConstantRule());
				}
				setWithLastConsumed(
					$current,
					"constant",
					lv_constant_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleIntConstant
entryRuleIntConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntConstantRule()); }
	iv_ruleIntConstant=ruleIntConstant
	{ $current=$iv_ruleIntConstant.current; }
	EOF;

// Rule IntConstant
ruleIntConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_constant_0_0=RULE_INT
			{
				newLeafNode(lv_constant_0_0, grammarAccess.getIntConstantAccess().getConstantINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntConstantRule());
				}
				setWithLastConsumed(
					$current,
					"constant",
					lv_constant_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleBoolConstant
entryRuleBoolConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolConstantRule()); }
	iv_ruleBoolConstant=ruleBoolConstant
	{ $current=$iv_ruleBoolConstant.current; }
	EOF;

// Rule BoolConstant
ruleBoolConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_constant_0_1='true'
				{
					newLeafNode(lv_constant_0_1, grammarAccess.getBoolConstantAccess().getConstantTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolConstantRule());
					}
					setWithLastConsumed($current, "constant", lv_constant_0_1, null);
				}
				    |
				lv_constant_0_2='false'
				{
					newLeafNode(lv_constant_0_2, grammarAccess.getBoolConstantAccess().getConstantFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolConstantRule());
					}
					setWithLastConsumed($current, "constant", lv_constant_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArgumentAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
