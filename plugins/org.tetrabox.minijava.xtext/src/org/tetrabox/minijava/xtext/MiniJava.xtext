grammar org.tetrabox.minijava.xtext.MiniJava with org.eclipse.xtext.common.Terminals

generate miniJava "http://www.example.org/minijava/MiniJava"

Program:
	('package' name=QualifiedName ';')?
	imports+=Import*
	classes+=Class*;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard ';';

QualifiedName: ID ('.' ID)* ;

QualifiedNameWithWildcard: QualifiedName '.*'? ;

Class:
	'class' name=ID ('extends' superclass=[Class|QualifiedName])? '{'
		members+=Member*
	'}';

Member:
	Field | Method;

Field:
	access=AccessLevel? TypedDeclaration ';';

Method:
	access=AccessLevel? TypedDeclaration
	'(' (params+=Parameter (',' params+=Parameter)*)? ')'
	body=Block;

enum AccessLevel:
	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

Parameter:
	TypedDeclaration;

Block:
	{Block} '{' statements+=Statement* '}';

Statement:
	VariableDeclaration |
	Return |
	Expression ';' |
	IfStatement;

VariableDeclaration:
	TypedDeclaration '=' expression=Expression ';';

Return:
	'return' expression=Expression ';';

IfStatement:
	'if' '(' expression=Expression ')' thenBlock=IfBlock
	(=>'else' elseBlock=IfBlock)?;

IfBlock returns Block:
	statements+=Statement
	| Block;

Symbol:
	VariableDeclaration | Parameter;

fragment TypedDeclaration *:
	type=[Class|QualifiedName] name=ID
;

NamedElement:
	Class | Member | Symbol
;

Expression:
	Assignment;

Assignment returns Expression:
	SelectionExpression
	({Assignment.left=current} '=' right=Expression)?; // Right associativity

SelectionExpression returns Expression:
	TerminalExpression
	(
		{MemberSelection.receiver=current} '.'
		member=[Member]
		(methodinvocation?='('
			(args+=Expression (',' args+=Expression)*)? ')'
		)?
	)*;

TerminalExpression returns Expression:
	{StringConstant} value=STRING |
	{IntConstant} value=INT |
	{BoolConstant} value=('true' | 'false') |
	{This} 'this' |
	{Super} 'super' |
	{Null} 'null' |
	{SymbolRef} symbol=[Symbol] |
	{New} 'new' type=[Class|QualifiedName] '(' ')' |
	'(' Expression ')';
