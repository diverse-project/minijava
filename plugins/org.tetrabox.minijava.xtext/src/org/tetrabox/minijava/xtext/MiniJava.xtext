grammar org.tetrabox.minijava.xtext.MiniJava with org.eclipse.xtext.common.Terminals

generate miniJava "http://www.example.org/minijava/MiniJava"

Program:
	('package' name=QualifiedName ';')?
	imports+=Import*
	classes+=Class*;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard ';';

QualifiedName:
	ID ('.' ID)*;

QualifiedNameWithWildcard:
	QualifiedName '.*'?;

Class:
	accessLevel=AccessLevel? 'class' name=ID ('extends' superclass=[Class|QualifiedName])? '{'
	members+=Member*
	'}';

Member:
	Field | Method;

Parameter:
	typeRef=TypeRef name=ID;

Field:
	access=AccessLevel? typeRef=TypeRef name=ID ';';

Method:
	access=AccessLevel? static?='static'? typeRef=TypeRef name=ID
	'(' (params+=Parameter (',' params+=Parameter)*)? ')'
	body=Block;

enum AccessLevel:
	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

Block:
	{Block} '{' statements+=Statement* '}';

// TODO enable method calls as statements
Statement:
	Return ';' |
	=> Assignment ';' |
	IfStatement |
	WhileStatement |
	ForStatement |
	PrintStatement ";" |
	Block// |
	//SelectionExpression ';'
	;
	
PrintStatement:
	"System" "." "out" "." "println" "(" expression = Expression ")"
;

Return:
	'return' expression=Expression;

IfStatement:
	'if' '(' expression=Expression ')' thenBlock=Block
	(=> 'else' elseBlock=Block)?;

WhileStatement:
	'while' '(' condition=Expression ')' block=Block;

ForStatement:
	'for' '(' declaration=Assignment ';' condition=Expression ';' progression=Assignment ')' block=Block;

TypeRef:
	SingleTypeRef ({ArrayTypeRef.typeRef=current} '[' ']')?;

SingleTypeRef:
	ClassRef |
	{IntegerTypeRef} "int" |
	{BooleanTypeRef} "boolean" |
	{StringTypeRef} "String" |
	{VoidTypeRef} "void";

ClassRef:
	class=[Class|QualifiedName];

NamedElement:
	TypedDeclaration |
	Class;

TypedDeclaration:
	Symbol | Member;

// here we need to set up an artificial priority with =>
Symbol:
	=> Parameter |  VariableDeclaration;

VariableDeclaration:
	typeRef=TypeRef name=ID;

Assignment:
	assignee=Assignee '=' value=Expression;

Assignee:
	=> SelectionExpression |
	VariableDeclaration //|
	//{SymbolRef}symbol=[Symbol|ID]
	;

Expression:
	Or;

Or returns Expression:
	And ({Or.left=current} "||" right=And)*;

And returns Expression:
	Equality ({And.left=current} "&&" right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=("==" | "!=")
	right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<")
	right=PlusOrMinus)*;

PlusOrMinus returns Expression:
	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-')
	right=MulOrDiv)*;

MulOrDiv returns Expression:
	Primary (({MulOrDiv.left=current} op=('*' | '/'))
	right=Primary)*;

Primary returns Expression:
	'(' Expression ')' |
	{Not} => "!" expression=Primary |
	SelectionExpression;

SelectionExpression returns Expression:
	TerminalExpression
	({MemberSelection.receiver=current} '.'
	member=[Member]
	(methodinvocation?='('
	(args+=Expression (',' args+=Expression)*)? ')')?)*;

TerminalExpression returns Expression:
	{StringConstant} value=STRING |
	{IntConstant} value=INT |
	{BoolConstant} value=('true' | 'false') |
	{This} 'this' |
	{Super} 'super' |
	{Null} 'null' |
	{New} 'new' type=[Class|QualifiedName] '(' ')' | //TODO possibility for non default constructors
	{SymbolRef} symbol=[Symbol|ID]
	;
	