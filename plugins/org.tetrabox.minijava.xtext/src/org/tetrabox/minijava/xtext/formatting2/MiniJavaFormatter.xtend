/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.xtext.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.tetrabox.minijava.xtext.miniJava.Cast
import org.tetrabox.minijava.xtext.miniJava.Class
import org.tetrabox.minijava.xtext.miniJava.Field
import org.tetrabox.minijava.xtext.miniJava.Method
import org.tetrabox.minijava.xtext.miniJava.MethodBody
import org.tetrabox.minijava.xtext.miniJava.MiniJavaPackage
import org.tetrabox.minijava.xtext.miniJava.New
import org.tetrabox.minijava.xtext.miniJava.Program
import org.tetrabox.minijava.xtext.miniJava.Selection
import org.tetrabox.minijava.xtext.miniJava.TypedElement
import org.tetrabox.minijava.xtext.services.MiniJavaGrammarAccess

class MiniJavaFormatter extends AbstractFormatter2 {

	@Inject extension MiniJavaGrammarAccess

	def dispatch void format(Program program, extension IFormattableDocument document) {

		//println(textRegionAccess)

		// In field declarations, there is no space a semicolumn, and there is a newline after
		program.allRegionsFor.keyword(";").prepend[noSpace]
		program.allRegionsFor.keyword(";").append[newLine]

		// Visit
		for (Class _class : program.getClasses()) {
			_class.format;
		}

		// Visit
		program.getMain.format;
	}

	def dispatch void format(Class _class, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		// We put some space after each class declaration
		_class.append[newLines = 2]

		// Single spaces around the class name
		_class.regionFor.feature(MiniJavaPackage::eINSTANCE.class_Name).surround[oneSpace]

		// New lines after opening bracket + indentation inside brackets  
		interior(
			_class.regionFor.keyword("{").append[newLines = 2],
			_class.regionFor.keyword("}"),
			[indent]
		)

		// Visit
		for (Field field : _class.getFields()) {
			field.format;
		}

		// Visit
		for (Method method : _class.getMethods()) {
			method.format;
		}
	}

	def dispatch void format(TypedElement field, extension IFormattableDocument document) {

		// Single space between field type and field name 
		field.regionFor.feature(MiniJavaPackage::eINSTANCE.typedElement_Name).prepend[oneSpace]

	}

	def dispatch void format(Method method, extension IFormattableDocument document) {

		// Single space between field type and field name 
		method.returntype.append[oneSpace]

		// No space between method name and params
		method.regionFor.feature(MiniJavaPackage::eINSTANCE.method_Name).append[noSpace]

		// No spaces surrounding method parameters list
		method.regionFor.keyword("(").append[noSpace]
		method.regionFor.keyword(")").prepend[noSpace]

		// One space in between each pair of parameters
		method.regionFor.keyword(",").prepend[noSpace]
		method.regionFor.keyword(",").append[oneSpace]

		// New lines after opening bracket + indentation inside brackets  
		interior(
			method.regionFor.keyword("{").append[newLine],
			method.regionFor.keyword("}"),
			[indent]
		)

		// Visit
		for (p : method.params) {
			p.format
		}

		// Visit
		method.body.format

	}

	def dispatch void format(MethodBody methodBody, extension IFormattableDocument document) {

		// Single space after return
		methodBody.regionFor.keyword("return").append[oneSpace]

		// No space before semicolumn, one new line after
		methodBody.regionFor.keyword(";").prepend[noSpace]
		methodBody.regionFor.keyword(";").append[newLine]

		// Visit
		methodBody.expression.format
	}

	def dispatch void format(New _new, extension IFormattableDocument document) {
		_new.regionFor.keyword("new").append[oneSpace]

		// No spaces surrounding args list
		_new.regionFor.keyword("(").append[noSpace]
		_new.regionFor.keyword(")").prepend[noSpace]

		// One space in between each pair of args
		_new.regionFor.keyword(",").prepend[noSpace]
		_new.regionFor.keyword(",").append[oneSpace]

		// Visit
		for (a : _new.args) {
			a.format
		}
	}

	def dispatch void format(Cast cast, extension IFormattableDocument document) {
		// No spaces surrounding args list
		cast.regionFor.keyword("(").append[noSpace]
		cast.regionFor.keyword(")").surround[noSpace]

	}

	def dispatch void format(Selection selection, extension IFormattableDocument document) {
		// No spaces surrounding selection dots
		selection.regionFor.keyword(".").surround[noSpace]

	}

// TODO: implement for Parameter, Method, MethodBody, Selection, MethodCall, New, Cast
}
