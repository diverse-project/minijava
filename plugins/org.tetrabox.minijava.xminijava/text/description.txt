Model XMiniJava

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package miniJava <http://org.tetrabox.minijava.xminijava/miniJava/>

  Class Program
    Attribute name : EString
    Reference imports : Import<<0..*>>
    Reference classes : TypeDeclaration<<0..*>>
    Reference state : State
    Operation main() : void
    Operation initialize(EString<<0..*>>) : void
    Operation execute() : State

  Class Import
    Attribute importedNamespace : EString

  Class TypeDeclaration -> NamedElement
    Attribute accessLevel : AccessLevel
    Reference implements : Interface<<0..*>>
    Reference members : Member<<0..*>>

  Class Class -> TypeDeclaration
    Attribute abstract : EBoolean
    Reference superClass : Class

  Class Interface -> TypeDeclaration

  Class Member -> TypedDeclaration
    Attribute access : AccessLevel

  Class Method -> Member
    Attribute abstract : EBoolean
    Attribute static : EBoolean
    Reference params : Parameter<<0..*>>
    Reference body : Block
    Operation call(State) : void
    Operation findOverride(Class) : Method

  Class Parameter -> Symbol
    Operation compare(Parameter) : EBoolean

  Class Field -> Member
    Reference defaultValue : Expression

  Class Block -> Statement
    Reference statements : Statement<<0..*>>
    Operation evaluateStatementKeepContext(State) : void
    Operation evaluateStatement(State) : void

  Class Statement
    Operation evaluateStatement(State) : void

  Class PrintStatement -> Statement
    Reference expression : Expression
    Operation evaluateStatement(State) : void

  Class Return -> Statement
    Reference expression : Expression
    Operation evaluateStatement(State) : void

  Class IfStatement -> Statement
    Reference expression : Expression
    Reference thenBlock : Block
    Reference elseBlock : Block
    Operation evaluateStatement(State) : void

  Class WhileStatement -> Statement
    Reference condition : Expression
    Reference block : Block
    Operation evaluateStatement(State) : void

  Class ForStatement -> Statement
    Reference declaration : Assignment
    Reference condition : Expression
    Reference progression : Assignment
    Reference block : Block
    Operation evaluateStatement(State) : void

  Class TypeRef
    Operation compare(TypeRef) : EBoolean

  Class SingleTypeRef -> TypeRef

  Class ClassRef -> SingleTypeRef
    Reference referencedClass : TypeDeclaration
    Operation compare(TypeRef) : EBoolean

  Class NamedElement
    Attribute name : EString

  Class TypedDeclaration -> NamedElement
    Reference typeRef : TypeRef

  Class Symbol -> TypedDeclaration

  Class VariableDeclaration -> Symbol, Assignee

  Class Assignment -> Statement
    Reference assignee : Assignee
    Reference value : Expression
    Operation evaluateStatement(State) : void

  Class Assignee

  Class Expression -> Statement, Assignee
    Operation evaluateStatement(State) : void
    Operation evaluateExpression(State) : Value

  Class ArrayTypeRef -> TypeRef
    Reference typeRef : SingleTypeRef

  Class IntegerTypeRef -> SingleTypeRef

  Class BooleanTypeRef -> SingleTypeRef

  Class StringTypeRef -> SingleTypeRef

  Class VoidTypeRef -> SingleTypeRef

  Class Or -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class And -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Equality -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Inequality -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class SuperiorOrEqual -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class InferiorOrEqual -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Superior -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Inferior -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Plus -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Minus -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Multiplication -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class Division -> Expression
    Reference left : Expression
    Reference right : Expression
    Operation evaluateExpression(State) : Value

  Class ArrayAccess -> Expression
    Reference object : Expression
    Reference index : Expression
    Operation evaluateExpression(State) : Value

  Class ArrayLength -> Expression
    Reference array : Expression
    Operation evaluateExpression(State) : Value

  Class Not -> Expression
    Reference expression : Expression
    Operation evaluateExpression(State) : Value

  Class Neg -> Expression
    Reference expression : Expression
    Operation evaluateExpression(State) : Value

  Class FieldAccess -> Expression
    Reference receiver : Expression
    Reference field : Field
    Operation evaluateExpression(State) : Value

  Class MethodCall -> Expression
    Reference receiver : Expression
    Reference method : Method
    Reference args : Expression<<0..*>>
    Operation evaluateExpression(State) : Value

  Class StringConstant -> Expression
    Attribute value : EString
    Operation evaluateExpression(State) : Value

  Class IntConstant -> Expression
    Attribute value : EInt
    Operation evaluateExpression(State) : Value

  Class BoolConstant -> Expression
    Attribute value : EString
    Operation evaluateExpression(State) : Value

  Class This -> Expression
    Operation evaluateExpression(State) : Value

  Class Super -> Expression

  Class Null -> Expression
    Operation evaluateExpression(State) : Value

  Class NewObject -> Expression
    Reference type : Class
    Reference args : Expression<<0..*>>
    Operation evaluateExpression(State) : Value

  Class NewArray -> Expression
    Reference type : TypeRef
    Reference size : Expression
    Operation evaluateExpression(State) : Value

  Class SymbolRef -> Expression
    Reference symbol : Symbol
    Operation evaluateExpression(State) : Value

  Class Context
    Reference bindings : SymbolBinding<<0..*>>
    Reference parentContext : Context
    Reference childContext : Context
    Operation createChildContext() : Context
    Operation findBinding(Symbol) : SymbolBinding
    Operation findCurrentContext() : Context

  Class Value
    Operation customToString() : EString
    Operation copy() : Value

  Class IntegerValue -> Value
    Attribute value : EInt
    Operation copy() : Value
    Operation customToString() : EString

  Class SymbolBinding
    Reference value : Value
    Reference symbol : Symbol<<1..1>>

  Class FieldBinding
    Reference field : Field<<1..1>>
    Reference value : Value

  Class StringValue -> Value
    Attribute value : EString
    Operation copy() : Value
    Operation customToString() : EString

  Class BooleanValue -> Value
    Attribute value : EBoolean
    Operation customToString() : EString
    Operation copy() : Value

  Class OutputStream
    Attribute stream : EString<<0..*>>

  Class State
    Reference rootFrame : Frame
    Reference objectsHeap : ObjectInstance<<0..*>>
    Reference outputStream : OutputStream
    Reference arraysHeap : ArrayInstance<<0..*>>
    Operation findCurrentFrame() : Frame
    Operation findCurrentContext() : Context
    Operation println(EString) : void
    Operation pushNewContext() : void
    Operation popCurrentContext() : void
    Operation pushNewFrame(ObjectInstance, Call, Context) : void
    Operation popCurrentFrame() : void

  Class Frame
    Reference call : Call
    Reference instance : ObjectInstance
    Reference childFrame : Frame
    Reference parentFrame : Frame
    Reference rootContext : Context
    Reference returnValue : Value
    Operation findCurrentFrame() : Frame
    Operation findCurrentContext() : Context

  Class NullValue -> Value
    Operation copy() : Value

  Class Call

  Class NewCall -> Call
    Reference new : NewObject<<1..1>>

  Class MethodCall2 -> Call
    Reference methodcall : MethodCall<<1..1>>

  Class ObjectInstance
    Reference fieldbindings : FieldBinding<<0..*>>
    Reference type : Class<<1..1>>

  Class ArrayInstance
    Reference value : Value<<0..*>>
    Attribute size : EInt

  Class ObjectRefValue -> Value
    Reference instance : ObjectInstance
    Operation copy() : Value
    Operation customToString() : EString

  Class ArrayRefValue -> Value
    Reference instance : ArrayInstance
    Operation copy() : Value

  Enum AccessLevel
    Literal PRIVATE = 0
    Literal PROTECTED = 1
    Literal PUBLIC = 2
